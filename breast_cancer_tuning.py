# -*- coding: utf-8 -*-
"""Breast_Cancer_Tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P8-dtxubXwWhpoaEJ5KDBFwcATjSvo09
"""

import pandas as pd

urlpredictor = 'https://raw.githubusercontent.com/JrSousaJ/Breast_Cancer/master/input.csv'
urlclass = 'https://raw.githubusercontent.com/JrSousaJ/Breast_Cancer/master/output.csv'

predictor = pd.read_csv(urlpredictor)
bcclass = pd.read_csv(urlclass)

"""Validação cruzada"""

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.wrappers.scikit_learn import KerasClassifier 
def makeNetwork(optimizer, loss, kernel_initializer, activation, neurons):
  classifier = Sequential()
  classifier.add(Dense(units = neurons, activation=activation, 
                      kernel_initializer=kernel_initializer, input_dim=30))
  classifier.add(Dropout(0.2))
  classifier.add(Dense(units = neurons, activation=activation, 
                      kernel_initializer=kernel_initializer))
  classifier.add(Dropout(0.2))
  classifier.add(Dense(units = 1, activation="sigmoid"))
  #ooptimizer = keras.optimizers.Adam(lr=0.005,decay=0.0001,clipvalue=0.5)
  classifier.compile(optimizer=optimizer, loss=loss, 
                   metrics=["binary_accuracy"])
  return classifier

"""**Tuning**"""

classifier = KerasClassifier(build_fn=makeNetwork)
params = {'batch_size':[10,5,2,30,20],
          'epochs':[100,200],
          'optimizer':['adam','sgd'],
          'loss':['binary_crossentropy', 'hinge'],
          'kernel_initializer':['random_uniform', 'normal'],
          'activation':['relu','tanh'],
          'neurons':[16,8]}
#result = cross_val_score(estimator=classifier,
#                         X=predictor, y=bcclass,
#                         cv=10, scoring="accuracy")
grid_search = GridSearchCV(estimator=classifier,
                           param_grid=params,
                           scoring="accuracy",
                           cv=10)
grid_search = grid_search.fit(predictor,bcclass)
best_params = grid_search.best_params_
best_precision = grid_search.best_score_

#average = result.mean()
#print(average)
#deviation = result.std()
#print(deviation)
print(best_precision)

weight0 = classifier.layers[0].get_weights()
print(weight0)
weight1 = classifier.layers[1].get_weights()
print(weight1)
predictions = classifier.predict(predictor_test)
predictions = (predictions > 0.5)

from sklearn.metrics import confusion_matrix, accuracy_score
precision = accuracy_score(bcclass_test,predictions)

matriz = confusion_matrix(bcclass_test,predictions)

result = classifier.evaluate(predictor_test,bcclass_test)
print(precision)
print(matriz)